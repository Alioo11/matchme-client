import { useEffect, useState } from "react";
import Head from "next/head";
import Container from "@/components/Container";
import { Button, Table, TableProps, Tag } from "antd";
import RankService from "@/services/rank";
import type { Rank } from "@/types/rank";
import Link from "next/link";
import JobAdvertService from "@/services/jobAdvert";
import { JobAdvert } from "@/types/jobAdvert";
import DateHelper from "@/helpers/date";
import { useRouter } from "next/router";

const TransactionPage = () => {
  const router = useRouter();
  const [ranks, setRanks] = useState<Array<Rank>>([]);

  const handleGetRankData = async () => {
    const query: any =
      router.asPath
        .split("?")[1]
        ?.split("&")
        .reduce((acc, cur) => {
          const [key, value] = cur.split("=");
          return { ...acc, [key]: value };
        }, {}) || {};
    const page = isNaN(Number(query.page)) ? 0 : Number(query.page);
    const pageSize = isNaN(Number(query.pageSize))
      ? 10
      : Number(query.pageSize);
    const rankData = await RankService.list(page, pageSize);
    setRanks(rankData);
  };

  const handleApply = (jobAdvertId: JobAdvert["_id"]) => {
    const res = JobAdvertService.apply(jobAdvertId);
    handleGetRankData();
  };

  const columns: TableProps<Rank>["columns"] = [
    {
      title: "job title",
      dataIndex: "jobAdvert",
      key: "jobAdvert",
      render: (data) => {
        return <Link href={data.link}>{data.jobTitle || "NO-JOB-TITLE"}</Link>;
      },
    },
    {
      title: "Company",
      render: (data) => {
        const companyTitle = data?.jobAdvert?.company?.title|| ""
        return <div>{companyTitle}</div>;
      },
    },
    {
      title: "Visa",
      dataIndex: "jobAdvert",
      key: "jobAdvert",
      render: (data) => {
        if (data.company === null) return <Tag color="yellow">Maybe</Tag>;
        return (
          <Tag color={data.company?.visa === "true" ? "green" : "red"}>
            {data.company?.visa === "true" ? "has it" : "nope"}
          </Tag>
        );
      },
    },
    {
      title: "last apply date",
      dataIndex: "jobAdvert",
      key: "actions",
      render: (data) => (
        <Tag color={data.lastApply ? "blue" : "default"}>
          {" "}
          {DateHelper.formatToReadableDateFromNow(data.lastApply)}
        </Tag>
      ),
    },
    {
      title: "announce date",
      dataIndex: "jobAdvert",
      key: "actions",
      render: (data) => (
        <Tag color="blue">
          {" "}
          {DateHelper.formatToReadableDateFromNow(data.announcedAt)}
        </Tag>
      ),
    },
    {
      title: "Platform",
      dataIndex: "jobAdvert",
      key: "actions",
      render: (data) => <Tag color="blue"> {data.platform}</Tag>,
    },
    {
      title: "actions",
      dataIndex: "jobAdvert",
      key: "actions",
      render: (data) => {
        return (
          <>
            <Button onClick={() => handleApply(data._id)}>apply</Button>
            <Link href={`/rank/${data._id}`}>
              <Button>detail</Button>
            </Link>
          </>
        );
      },
    },
  ];

  useEffect(() => {
    handleGetRankData();
  }, []);

  return (
    <>
      <Head>
        <title>matchme client</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Container>
        <Table
          style={{ width: "100%" }}
          columns={columns}
          dataSource={ranks}
          pagination={false}
        />
      </Container>
    </>
  );
};

export default TransactionPage;
